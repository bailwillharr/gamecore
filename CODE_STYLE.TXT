######################
# NAMING CONVENTIONS #
######################

# Variables

All variable names in all contexts are snake_case.
Examples: i, my_var, num, player_camera_controller

Static variables (both in functions and out) begin with `s_`.
Example:
`
static MyClass s_instance;

void MyFunc() {
	static int s_count = 0;
}
`

Private and protected non-static member variables begin with `m_`.
Private and protected static member variables begin with `s_`.
Public member variables have no prefix and they are accessed with `this->`.
Example:
`
class MyClass {
	static int s_instance_count;
	bool m_active;

public:
	const char* debug_name;
}
`

Global variables, when exported out of a translation unit, are prefixed with `g_`.
Example: (in a header file)
`
extern const char* const g_resources_directory;
`

# Functions and methods

Function and method names use lowerCamelCase.
Examples:
`
void doThing();

int addInts(int a, int b);

void MyClass::reset() {}
`

# Classes, Structs, and Enums

Classes, struct, enums, and other types use UpperCamelCase.
Examples:
`
class MyClass;

struct SomeStructure;

enum class Options {
	ENABLE,
	DISABLE
};

using IntVector = std::vector<int>;
`

# Template parameters, concepts

Template parameters and concepts use UpperCamelCase
Examples:
`
template <typename T>
concept ValidSystem = std::is_base_of_v<System>;

template <typename T, FooType Type>
class Foo {
}
`

# Namespaces

Namespaces only contain lowercase letters. No other characters, including underscores, are used in namespace names.
Example: `namespace engine::util {`



################################################################################



################
# CLASS LAYOUT #
################

Classes are laid out as follows:
`
class X {
	/* using declarations */
    /* nested classes, structs, and enums
	/* static data members */
	/* non-static data members */

public:
	/* default constructor */
	/* other constructors */
	/* copy constructor */
	/* move constructor */
	
	/* destructor */
	
	/* copy assignment operator */
	/* move assignment operator */
	/* other operator overloads */
	
	/* all public static methods */
	/* all public non-static methods */

protected:
	/* all protected static methods */
	/* all protected non-static methods */

private:
	/* all private static methods */
	/* all private non-static methods */
};
`

Structs are laid out similarly.
Avoid having access specifiers in structs.
Structs should almost always be trivially constructible and copyable. If not, consider using a class instead.

Inlined methods are to be avoided as much as possible. Even for trivial getters/setters.

Classes that should not be copied and/or moved should have their copy and/or move constructors
and copy/move assignment operators explicitly deleted.

Ensure that constructors with a single argument are marked `explicit` unless implicit construction
is intended.



################################################################################



######################
# INCLUDE DIRECTIVES #
######################

Header files should be included in the following order:
- Header corresponding to source file
- C standard library includes (as, e.g., cstdint)
- C++ STL includes
- External libraries from, e.g., 'dependencies/' directory, PhysX, or Vulkan SDK. Use angle brackets.
- Headers from other projects in the source tree. Use angle brackets.
- Header files from the current project. Use double quotes.
Each section should be sorted alphabetically (In VS: highlight the includes, right-click -> #include directives -> sort).



################################################################################



################
# HEADER FILES #
################

Header files should be organised as follows:
- pragma once
- includes as mentioned above, be conservative with number of includes
- forward declarations
- using declarations
- concepts
- constexpr constants
- extern global variables
- function declarations or definitions if templated/inline (or later if needed)
- classes, structs, enums, etc.
